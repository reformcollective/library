name: Code Checks
on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  Check_Formatting:
    # only run if not authored by dependabot
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN}}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni --no-frozen-lockfile
      # END INSTALLATION

      - name: format
        run: npm run format > /dev/null
        continue-on-error: true
      - name: Check for changes and commit
        run: |
          if git diff --exit-code; then
            echo "No changes detected"
            exit 0
          fi
          if git diff --exit-code --ignore-submodules; then
            echo "You have unformatted code in your submodules"
            exit 1
          fi
          echo "You have unformatted code!"
          git diff
          exit 1

  Check_Lines:
    # only run if not authored by dependabot
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          submodules: recursive
      - name: Get lines changed
        id: lines
        run: |
          echo "::set-output name=num_lines::$(git diff --numstat origin/${{ github.base_ref }} HEAD | grep -E "\.ts$|\.tsx$" | grep -v ".d.ts" | awk '{print $1}' | awk '{s+=$1} END {print s}')"
      - name: Log lines changed
        run: echo "${{ steps.lines.outputs.num_lines }} lines changed"
      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: changed
      - name: Comment on PR (Soft Limit)
        # comment on the PR if the number of lines changed is greater than 400 and less than 800
        # if a previous comment exists, edit it
        if: steps.lines.outputs.num_lines > 400 && steps.lines.outputs.num_lines < 800 && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: This PR has ${{ steps.lines.outputs.num_lines }} lines of typescript code changed. Please keep PRs short and focused.
          edit-mode: replace
      - name: Comment on PR (Hard Limit)
        # comment on the PR if the number of lines changed is greater than or equal to 800
        # if a previous comment exists, edit it
        if: steps.lines.outputs.num_lines >= 800 && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            This PR is over the hard limit of 800 lines of typescript code changed, with ${{ steps.lines.outputs.num_lines }} lines changed. Please split this PR into multiple smaller PRs if possible.

            <details>
            <summary>How do I split a PR?</summary>
            <br>
            How to split a PR (Method 1):
            <br>
            <ol>
              <li>Delete or reset all the files you don't want to change in this PR</li>
              <li>Commit and push. This will create a new commit on this PR</li>
              <li>Create a new branch with <code>git branch new-branch-name</code></li>
              <li>Checkout the new branch with <code>git checkout new-branch-name</code></li>
              <li>Revert the last commit with <code>git revert HEAD</code></li>
              <li>You should now have two branches, and can PR them separately</li>
            </ol>
            <br>
            How to split a PR (Method 2):
            <br>
            <ol>
              <li>Hard reset to a previous commit with <code>git reset --hard <commit-hash></code></li>
              <li>Create a new branch with <code>git branch new-branch-name</code></li>
              <li>Checkout the new branch with <code>git checkout new-branch-name</code></li>
              <li>Push the new branch with <code>git push -u origin new-branch-name</code></li>
              <li>You should now have two branches, and can PR them separately</li>
            </ol>
            </details>
          edit-mode: replace
      # - name: Fail Check if over Hard Limit
      #   # fail the check if the number of lines changed is greater than or equal to 800
      #   if: steps.lines.outputs.num_lines >= 800
      #   run: exit 1
      - name: Update if comment exists
        # delete the old comment if the number of lines changed is less than 400
        # only if the comment exists
        if: steps.lines.outputs.num_lines <= 400 && steps.fc.outputs.comment-id != '' && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: This PR is below the line limit with ${{ steps.lines.outputs.num_lines }} lines of typescript code changed. Awesome!
          edit-mode: replace

  Generate_Types:
    # install modules, run a build, then cache and upload so we can use in other builds
    runs-on: ubuntu-latest
    needs: Check_Formatting
    env:
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni
      # END INSTALLATION

      - name: Build
        run: npm run build
      - name: Cache generated-types
        uses: actions/cache@v2
        with:
          path: src/types/gatsby-types.d.ts
          key: ${{ runner.os }}-generated-types-${{ github.sha }}
      - name: Upload Generated Types
        uses: actions/upload-artifact@v2
        with:
          name: generated-types
          path: src/types/gatsby-types.d.ts

  Check_Linting:
    runs-on: ubuntu-latest
    needs: Generate_Types
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni
      # END INSTALLATION

      - name: Fetch Generated Types
        uses: actions/download-artifact@v2
        with:
          name: generated-types
      - name: Lint
        run: npm run lint

  Type_Checking:
    runs-on: ubuntu-latest
    needs: Generate_Types
    env:
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni
      # END INSTALLATION

      - name: Fetch Generated Types
        uses: actions/download-artifact@v2
        with:
          name: generated-types
      - name: Check types
        run: npx tsc --noEmit
