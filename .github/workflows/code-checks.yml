name: Code Checks
on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  Check_Formatting:
    # only run if not authored by dependabot
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN}}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni --no-frozen-lockfile
      # END INSTALLATION

      - name: format
        run: npm run format > /dev/null
        continue-on-error: true
      - name: Check for changes and commit
        run: |
          if git diff --exit-code; then
            echo "No changes detected"
            exit 0
          fi
          if git diff --exit-code --ignore-submodules; then
            echo "You have unformatted code in your submodules"
            exit 1
          fi
          echo "You have unformatted code!"
          git diff
          exit 1

  Generate_Types:
    # install modules, run a build, then cache and upload so we can use in other builds
    runs-on: ubuntu-latest
    needs: Check_Formatting
    env:
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni
      # END INSTALLATION

      - name: Build
        run: npm run build
      - name: Cache generated-types
        uses: actions/cache@v2
        with:
          path: src/types/gatsby-types.d.ts
          key: ${{ runner.os }}-generated-types-${{ github.sha }}
      - name: Upload Generated Types
        uses: actions/upload-artifact@v2
        with:
          name: generated-types
          path: src/types/gatsby-types.d.ts

  Check_Linting:
    runs-on: ubuntu-latest
    needs: Generate_Types
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni
      # END INSTALLATION

      - name: Fetch Generated Types
        uses: actions/download-artifact@v2
        with:
          name: generated-types
      - name: Lint
        run: npm run lint

  Type_Checking:
    runs-on: ubuntu-latest
    needs: Generate_Types
    env:
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
    steps:
      # BEGIN INSTALLATION
      - name: Determine package manager
        id: package-manager
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "PNPM=true" >> $GITHUB_OUTPUT
          fi
          if [ -f "package-lock.json" ]; then
            echo "PNPM=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM == 'true'
        with:
          cache: "pnpm"
          node-version-file: .nvmrc
      - name: Use Node
        uses: actions/setup-node@v3
        if: steps.package-manager.outputs.PNPM != 'true'
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npx @antfu/ni
      # END INSTALLATION

      - name: Fetch Generated Types
        uses: actions/download-artifact@v2
        with:
          name: generated-types
      - name: Check types
        run: npx tsc --noEmit
